name: Deploy to VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ secrets.NODE_VERSION }}
        
    - name: Create SSH key
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
        # Add GitHub to known hosts
        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}
        CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
        CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        PORT: ${{ secrets.PORT }}
        VPS_PROJECT_PATH: ${{ secrets.VPS_PROJECT_PATH }}
        PM2_APP_NAME: ${{ secrets.PM2_APP_NAME }}
        PM2_COMMAND: ${{ secrets.PM2_COMMAND }}
        NVM_NODE_PATH: ${{ secrets.NVM_NODE_PATH }}
        NVM_NPM_PATH: ${{ secrets.NVM_NPM_PATH }}
        NVM_PM2_PATH: ${{ secrets.NVM_PM2_PATH }}
        FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
        FRONTEND_DEV_URL: ${{ secrets.FRONTEND_DEV_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
      run: |
        # Create .env file content
        ENV_CONTENT="CLOUDINARY_CLOUD_NAME=\"${CLOUDINARY_CLOUD_NAME}\"\n\
        CLOUDINARY_API_KEY=\"${CLOUDINARY_API_KEY}\"\n\
        CLOUDINARY_API_SECRET=\"${CLOUDINARY_API_SECRET}\"\n\
        PORT=${PORT}\n\
        NODE_ENV=production\n\
        FRONTEND_URL=\"${FRONTEND_URL}\"\n\
        FRONTEND_DEV_URL=\"${FRONTEND_DEV_URL}\"\n\
        JWT_SECRET=\"${JWT_SECRET}\""

        # Create ecosystem config content
        ECOSYSTEM_CONTENT='module.exports = {
          apps: [{
            name: "'${PM2_APP_NAME}'",
            script: "./dist/app.js",
            instances: "max",
            exec_mode: "cluster",
            autorestart: true,
            watch: false,
            max_memory_restart: "1G",
            env: {
              NODE_ENV: "production",
              PORT: '${PORT}'
            },
            error_file: "./logs/error.log",
            out_file: "./logs/out.log",
            merge_logs: true,
            log_date_format: "YYYY-MM-DD HH:mm:ss Z"
          }]
        }'
        
        # Deploy and update environment
        ssh -i ~/.ssh/id_rsa $VPS_USER@$VPS_HOST "
          # Setup environment
          export PATH=${NVM_NODE_PATH}:${NVM_NPM_PATH}:${NVM_PM2_PATH}:\$PATH &&
          
          # Setup SSH for git
          mkdir -p ~/.ssh &&
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts &&
          
          # Create directory without sudo
          mkdir -p ${VPS_PROJECT_PATH} &&
          
          cd ${VPS_PROJECT_PATH} &&
          
          # Backup .env if it exists
          if [ -f .env ]; then
            cp .env .env.backup
          fi &&
          
          # Clean directory except .env.backup
          find . -mindepth 1 -delete &&
          
          # Clone repository directly using the default GITHUB_TOKEN
          git clone https://${{ github.token }}@github.com/${GITHUB_REPOSITORY}.git . &&
          
          # Create necessary directories
          mkdir -p logs dist/data &&
          
          # Create configuration files
          echo -e \"$ENV_CONTENT\" > .env &&
          echo '$ECOSYSTEM_CONTENT' > ecosystem.config.js &&
          
          # Install dependencies and build
          npm ci &&
          npm run build &&
          npm ci --omit=dev &&
          
          # Copy data files if they exist
          if [ -d src/data ]; then
            cp -r src/data/* dist/data/ || true
          fi &&
          
          # Set correct permissions
          chmod -R 755 dist/data &&
          chmod 644 .env ecosystem.config.js &&
          
          # Start/Reload PM2
          if ${PM2_COMMAND} describe ${PM2_APP_NAME} > /dev/null 2>&1; then
            echo 'Reloading existing PM2 process...' &&
            ${PM2_COMMAND} reload ${PM2_APP_NAME} --update-env
          else
            echo 'Starting new PM2 process...' &&
            ${PM2_COMMAND} start ecosystem.config.js &&
            ${PM2_COMMAND} save
          fi
        " 
